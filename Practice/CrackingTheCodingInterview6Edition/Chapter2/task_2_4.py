"""
Напишите код, разбивающий связный список вокруг значения x, так чтобы все узлы,
меньшие x, оказались перед узлами, большими или равными x.
"""
from linked_list import Node


def distribute_nodes(linked_list, x):
    """
    Распределяет узлы относительно числа x. Если значение больше или равно x,
    то узел переходит в конец связного списка. А если меньше x, то остаётся
    на своём месте. В конце сортировки в левой части связного списка остаются
    набор чисел, меньших x, а справа - больший, чем x.
    :param linked_list: связный список.
    :param x: число, относительно которого будет осуществлено распределение.
    :return: связный список с распределёнными относительно x нодами.
    """
    i = 0
    previous_node = None
    current_node = linked_list.head_node
    while i < len(linked_list):
        # Если текущий нод больше x, то перемещаем его в конец связного списка.
        if current_node.data >= x:
            # Если текущий нод является корневым, то делаем следующий за ним
            # нод корневым.
            if current_node is linked_list.head_node:
                linked_list.head_node = current_node.next_node
            # Если нод расположен не скраю, значит он должен иметь предыдущий
            # нод. Ситуация, при которой previous_node может быть равен None,
            # исключена, так как тогда текущий нод корневой. Извлекаем из
            # цепочки ссылок текущий нод для последущего его перемещения в
            # конец.
            else:
                previous_node.next_node = current_node.next_node
            # Добавление нода в конец связного списка. Создаём новый нод, чтобы
            # не затруднять ситуацию с переназначением ссылок.
            linked_list.add_node(Node(current_node.data))
        # Если текущий нод меньше x, то записываем его в previous_node, так как
        # он сохранит свою позицию. А значит следующий нод будет соседним по от-
        # ношению к нему.
        else:
            previous_node = current_node
        current_node = current_node.next_node
        i += 1
    return linked_list
