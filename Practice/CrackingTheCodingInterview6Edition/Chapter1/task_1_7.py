"""
Напишите алгоритм, реализующий следующее условие: если эдемент матрицы в
точке (M,N) равен 0, то весь столбец и вся строка обнуляются.
"""
import copy


def next_null_coordinates(matrix):
    """
    Генерирует гоординаты новых нулей, если таковы имеются в матрице.
    :param matrix: матрица из чисел.
    :return: координаты следующего нуля из матрицы.
    """
    for i, row in enumerate(matrix):
        for j, element in enumerate(row):
            if element == 0:
                yield i, j
    raise StopIteration


def nullify_matrix(matrix):
    """
    Обнуляет строку и столбец, соответствующие координате найденных
    элементов со значением 0.
    :param matrix: матрица из чисел M x N.
    :return: матрица с обнулёнными строкой(ами) и столбцом(и) по
    найденным нулям.
    """
    # Приходится использовать именно deepcopy(), потому что shallow
    # copy сохраняет ссылки на значения внутренних объектов. То есть
    # у нас список из списков, поэтому тут три уровня:
    # 1) Внешний list;
    # 2) Внутренние list'ы;
    # 3) Элементы внутренних list'ов.
    # Как раз третий пункт будет иметь ссылки на оригинал при использовании
    # поверхностных копий. А deepcopy проходится в глубину до максимума.
    nulled_matrix = copy.deepcopy(matrix)
    for i, j in next_null_coordinates(matrix):
        # Обнуление строки
        nulled_matrix[i] = [0] * len(matrix[0])
        # Обнуление столбца
        for row_index in range(len(matrix)):
            nulled_matrix[row_index][j] = 0
    return nulled_matrix


if __name__ == '__main__':
    m = [
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 0, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1],
    ]
    print(nullify_matrix(m))
